#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set et ai sta sw=2 ts=2 tw=0:
"""
LiLo for BootSetup.
"""
__copyright__ = 'Copyright 2013-2014, Salix OS'
__license__ = 'GPL2+'

import tempfile
import shutil
import os
import salix_livetools_library as sltl

class Lilo:
  
  def __init__(self):
    self._prefix = "bootsetup.lilo-"
    self._tmp = tempfile.mkdtemp(self._prefix)
    sltl.mounting._tempMountDir = os.path.join(self._tmp, 'mounts')

  def __del__(self):
    print "nettoyage lilo"
    if self._tmp and os.path.exists(self._tmp):
      shutil.rmtree(self._tmp)

  def getConfigurationPath(self):
    return os.path.join(self._tmp, "lilo.conf")

  def _mountBootPartition(self, boot_partition):
    """
    Return the mount point
    """
    # TODO mount boot_partition
    return ""

  def _mountBootInBootPartition(self, mount_point):
    # TODO mount /boot in boot_partition
    pass

  def _mountPartitions(self, partitions):
    """
    Return a list of mount points for each partition
    """
    # TODO mount other partitions
    return []

  def _createLiloSections(self, partitions, mountPointList):
    """
    Return a list of lilo section string for each partition.
    There could be more section than partitions if there are multiple kernels.
    """
    # TODO identify kernel+initrd in each linux partition
    return []

  def _umountAll(self, mount_point, mountPointList):
    # TODO umount all
    pass

  def _getFrameBufferConf(self):
    """
    Return the frame buffer configuration for this hardware.
    """
    # TODO identify framebuffer type
    return "normal"

  def createConfiguration(self, mbr_device, boot_partition, partitions):
    """
    paritions format: [device, filesystem, boot type, label]
    """
    self.mbr_device = mbr_device
    self.boot_partition = boot_partition
    self.partitions = partitions
    try:
      mp = self._mountBootPartition(boot_partition)
      self._mountBootInBootPartition(mp)
      mpList = self._mountPartitions(partitions)
      liloSections = self._createLiloSections(partitions, mpList)
      fb = self._getFrameBufferConf()
      # TODO write configuration
      f = open(self.getConfigurationPath(), "w")
      f.write("""# LILO configuration file
# Generated by BootSetup
#
# Start LILO global section
# Append any additional kernel parameters:
append = "vt.default_utf8=1 "
boot = "{boot}"
lba32
compact

# Boot BMP Image.
# Bitmap in BMP format: 640x480x8
bitmap = /boot/salix.bmp
# Menu colors (foreground, background, shadow, highlighted
# foreground, highlighted background, highlighted shadow):
bmp-colors = 255,20,255,20,255,20
# Location of the option table: location x, location y, number of
# columns, lines per column (max 15), "spill" this is how many
# entries must be in the first column before the next begins to
# be used.  We do not specify it here, as there is just one column.
bmp-table = 60,6,1,16
# Timer location x, timer location y, foreground color,
# background color, shadow color.
bmp-timer = 65,29,0,255

# Standard menu.
# Or, you can comment out the bitmap menu above and 
# use a boot message with the standard menu:
# message = /boot/boot_message.txt

# Wait until the timeout to boot (if commented out, boot the
# first entry immediately):
prompt
# Timeout before the first entry boots.
# This is given in tenths of a second, so 600 for every minute:
timeout = 50
# Override dangerous defaults that rewrite the partition table:
change-rules
reset

# Normal VGA console
# vga = normal
# VESA framebuffer console @ 1600x1200x16m
# vga=799
# VESA framebuffer console @ 1600x1200x64k
# vga=798
# VESA framebuffer console @ 1600x1200x32k
# vga=797
# VESA framebuffer console @ 1600x1200x256
# vga=796
# VESA framebuffer console @ 1280x1024x16m
# vga=795
# VESA framebuffer console @ 1280x1024x64k
# vga=794
# VESA framebuffer console @ 1280x1024x32k
# vga=793
# VESA framebuffer console @ 1280x1024x256
# vga=775
# VESA framebuffer console @ 1024x768x16m
# vga=792
# VESA framebuffer console @ 1024x768x64k
# vga=791
# VESA framebuffer console @ 1024x768x32k
# vga=790
# VESA framebuffer console @ 1024x768x256
# vga=773
# VESA framebuffer console @ 800x600x16m
# vga=789
# VESA framebuffer console @ 800x600x64k
# vga=788
# VESA framebuffer console @ 800x600x32k
# vga=787
# VESA framebuffer console @ 800x600x256
# vga=771
# VESA framebuffer console @ 640x480x16m
# vga=786
# VESA framebuffer console @ 640x480x64k
# vga=785
# VESA framebuffer console @ 640x480x32k
# vga=784
# VESA framebuffer console @ 640x480x256
# vga=769
vga = {vga}
# End LILO global section
#
# BootSetup can be executed from a LiveCD. This means that lilo
# could be issued from a 'chrooted' Linux partition, which would
# happen to be the first Linux partition listed below.
# Therefore the following paths are relevant only when viewed
# from that 'chrooted' partition's perspective. Please take this
# constraint into consideration if you must modify this file
# or else BootSetup will fail.
#
# If later on you want to use this configuration file directly
# with lilo in a command line, use the following syntax:
# "lilo -v -C /etc/bootsetup/lilo.conf" instead of the traditional
# "lilo -v" command. You must of course issue that command from
# the operating system holding /etc/bootsetup/lilo.conf and ensure that
# all partitions referenced in it are mounted on the appropriate
# mountpoints.
""".format( \
    boot = "/dev/" + mbr_device, \
    vga = fb \
    ))
      f.close()
    finally:
      self._umountAll()

  def install(self):
    """
    Assuming that last configuration editing didn't modified mount point.
    """
    print "TODO install LiLo"
    try:
      mp = self._mountBootPartition(self.boot_partition)
      self._mountBootInBootPartition(mp)
      # TODO bind /dev in boot_partition
      mpList = self._mountPartitions(self.partitions)
      # TODO copy the configuration to the boot_partition
      # TODO run lilo
    finally:
      self._umountAll()
